/// <reference types="react" />
import { Node as MarkdocNode } from '@markdoc/markdoc';
import { ContentFormField } from "../../api.js";
import type { EditorState } from 'prosemirror-state';
import { ContentComponent } from "../../../content-components.js";
import { EditorOptions } from "./config.js";
export { createMarkdocConfig } from "./markdoc-config.js";
/**
 * @deprecated This is experimental and buggy, use at your own risk.
 */
export declare function __experimental_markdoc_field({ label, description, options, components, }: {
    label: string;
    description?: string;
    options?: EditorOptions;
    components?: Record<string, ContentComponent>;
}): __experimental_markdoc_field.Field;
export declare namespace __experimental_markdoc_field {
    type Field = ContentFormField<EditorState, EditorState, {
        node: MarkdocNode;
    }>;
}
/**
 * @deprecated This is experimental and buggy, use at your own risk.
 */
export declare function __experimental_mdx_field({ label, description, options, components, }: {
    label: string;
    description?: string;
    options?: EditorOptions;
    components?: Record<string, ContentComponent>;
}): __experimental_mdx_field.Field;
export declare namespace __experimental_mdx_field {
    type Field = ContentFormField<EditorState, EditorState, string>;
}
export declare function __experimental_markdoc_field_cloudImageBlock(args: {
    label: string;
}): ({
    label: string;
    description?: string | undefined;
    icon?: import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>> | undefined;
    schema: {
        src: import("../../api.js").SlugFormField<string, string, string, null>;
        alt: import("../../api.js").SlugFormField<string, string, string, null>;
        height: import("../../api.js").BasicFormField<number | null, number | null>;
        width: import("../../api.js").BasicFormField<number | null, number | null>;
    };
    forSpecificLocations?: boolean | undefined;
} & ({
    ContentView?: ((props: {
        value: {
            readonly src: string;
            readonly alt: string;
            readonly height: number | null;
            readonly width: number | null;
        };
    }) => import("react").ReactNode) | undefined;
} | {
    NodeView?: ((props: {
        value: {
            readonly src: string;
            readonly alt: string;
            readonly height: number | null;
            readonly width: number | null;
        };
        onChange(value: {
            readonly src: string;
            readonly alt: string;
            readonly height: number | null;
            readonly width: number | null;
        }): void;
        onRemove(): void;
        isSelected: boolean;
    }) => import("react").ReactNode) | undefined;
})) & {
    kind: "block";
};
