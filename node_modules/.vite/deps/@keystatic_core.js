import {
  $c1d7fb2ec91bae71$export$6d08773d2e66f8f2,
  $fca6afa0e843324b$export$f12b703ca79dfbb1,
  ActionButton,
  ArrayFieldListView,
  ArrayFieldValidationMessages,
  BlockWrapper,
  Box,
  Button,
  ButtonGroup,
  Checkbox,
  ClearButton,
  Content,
  Dialog,
  DialogContainer,
  FieldDataError,
  FieldLabel,
  FieldMessage,
  Flex,
  FormValueContentFromPreviewProps,
  Heading,
  ImageDimensionsInput,
  ImageFieldInput,
  MenuTrigger,
  NotEditable,
  NumberField,
  PathContext,
  ProgressCircle,
  SlugFieldContext,
  Text,
  TextArea,
  TextField,
  TextLink,
  ToolbarSeparator,
  VStack,
  _Combobox,
  _Menu,
  _Picker,
  assertRequired,
  basicFormFieldWithSimpleReaderParse,
  clientSideValidateProp,
  collection,
  config,
  createGetPreviewProps,
  decimal_default,
  document$1,
  emptyImageData,
  filter,
  fixPath,
  getInitialPropsValue,
  getSrcPrefix,
  getUploadedFile,
  isValidURL,
  l10nMessages,
  loadImageData,
  object,
  parseImageData,
  require_dist,
  require_lib,
  require_slugify,
  singleton,
  text,
  useConfig,
  useDialogContainer,
  useEventCallback,
  useFieldContext,
  useImageLibraryURL,
  useIsInDocumentEditor,
  useObjectURL,
  useSlugsInCollection,
  useTree,
  validateText,
  valueToUpdater
} from "./chunk-MDNGFAXE.js";
import {
  require_cookie
} from "./chunk-CO6I4FWO.js";
import {
  require_jsx_runtime
} from "./chunk-6Y4BSO2J.js";
import "./chunk-JDB2MZQC.js";
import {
  require_react
} from "./chunk-ZVHPWISC.js";
import {
  __toESM
} from "./chunk-UF6YC252.js";

// node_modules/@keystatic/core/dist/api-bcca4391.js
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_react = __toESM(require_react(), 1);
var import_slugify = __toESM(require_slugify(), 1);
var import_sanitize_url = __toESM(require_dist(), 1);
function component(options) {
  return options;
}

// node_modules/@keystatic/core/dist/keystatic-core.js
var import_jsx_runtime3 = __toESM(require_jsx_runtime());
var import_react3 = __toESM(require_react());

// node_modules/@keystatic/core/dist/index-d178e1f7.js
var import_react2 = __toESM(require_react(), 1);
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
function validateInteger(validation, value, label) {
  if (value !== null && (typeof value !== "number" || !Number.isInteger(value))) {
    return `${label} must be a whole number`;
  }
  if (validation !== null && validation !== void 0 && validation.isRequired && value === null) {
    return `${label} is required`;
  }
  if (value !== null) {
    if ((validation === null || validation === void 0 ? void 0 : validation.min) !== void 0 && value < validation.min) {
      return `${label} must be at least ${validation.min}`;
    }
    if ((validation === null || validation === void 0 ? void 0 : validation.max) !== void 0 && value > validation.max) {
      return `${label} must be at most ${validation.max}`;
    }
  }
}
function IntegerFieldInput(props) {
  var _props$validation;
  const [blurred, onBlur] = (0, import_react2.useReducer)(() => true, false);
  return (0, import_jsx_runtime2.jsx)(NumberField, {
    label: props.label,
    description: props.description,
    isRequired: (_props$validation = props.validation) === null || _props$validation === void 0 ? void 0 : _props$validation.isRequired,
    errorMessage: props.forceValidation || blurred ? validateInteger(props.validation, props.value, props.label) : void 0,
    onBlur,
    autoFocus: props.autoFocus,
    value: props.value === null ? void 0 : props.value,
    onChange: (val) => {
      props.onChange(val === void 0 ? null : val);
    }
  });
}
function integer({
  label,
  defaultValue,
  validation,
  description
}) {
  return basicFormFieldWithSimpleReaderParse({
    label,
    Input(props) {
      return (0, import_jsx_runtime2.jsx)(IntegerFieldInput, {
        label,
        description,
        validation,
        ...props
      });
    },
    defaultValue() {
      return defaultValue !== null && defaultValue !== void 0 ? defaultValue : null;
    },
    parse(value) {
      if (value === void 0) {
        return null;
      }
      if (typeof value === "number") {
        return value;
      }
      throw new FieldDataError("Must be a number");
    },
    validate(value) {
      const message = validateInteger(validation, value, label);
      if (message !== void 0) {
        throw new FieldDataError(message);
      }
      assertRequired(value, validation, label);
      return value;
    },
    serialize(value) {
      return {
        value: value === null ? void 0 : value
      };
    }
  });
}

// node_modules/@keystatic/core/dist/keystatic-core.js
var import_slugify2 = __toESM(require_slugify());
var import_sanitize_url2 = __toESM(require_dist());
var import_is_hotkey = __toESM(require_lib());
var import_cookie = __toESM(require_cookie());
function array(element, opts) {
  var _opts$label;
  return {
    kind: "array",
    element,
    label: (_opts$label = opts === null || opts === void 0 ? void 0 : opts.label) !== null && _opts$label !== void 0 ? _opts$label : "Items",
    description: opts === null || opts === void 0 ? void 0 : opts.description,
    itemLabel: opts === null || opts === void 0 ? void 0 : opts.itemLabel,
    asChildTag: opts === null || opts === void 0 ? void 0 : opts.asChildTag,
    slugField: opts === null || opts === void 0 ? void 0 : opts.slugField,
    validation: opts === null || opts === void 0 ? void 0 : opts.validation
  };
}
function CheckboxFieldInput(props) {
  return (0, import_jsx_runtime3.jsxs)(Checkbox, {
    isSelected: props.value,
    onChange: props.onChange,
    autoFocus: props.autoFocus,
    children: [(0, import_jsx_runtime3.jsx)(Text, {
      children: props.label
    }), props.description && (0, import_jsx_runtime3.jsx)(Text, {
      slot: "description",
      children: props.description
    })]
  });
}
function checkbox({
  label,
  defaultValue = false,
  description
}) {
  return basicFormFieldWithSimpleReaderParse({
    label,
    Input(props) {
      return (0, import_jsx_runtime3.jsx)(CheckboxFieldInput, {
        ...props,
        label,
        description
      });
    },
    defaultValue() {
      return defaultValue;
    },
    parse(value) {
      if (value === void 0)
        return defaultValue;
      if (typeof value !== "boolean") {
        throw new FieldDataError("Must be a boolean");
      }
      return value;
    },
    validate(value) {
      return value;
    },
    serialize(value) {
      return {
        value
      };
    }
  });
}
function child(options) {
  return {
    kind: "child",
    options: options.kind === "block" ? {
      ...options,
      dividers: options.dividers,
      formatting: options.formatting === "inherit" ? {
        blockTypes: "inherit",
        headingLevels: "inherit",
        inlineMarks: "inherit",
        listTypes: "inherit",
        alignment: "inherit",
        softBreaks: "inherit"
      } : options.formatting,
      links: options.links,
      images: options.images,
      tables: options.tables,
      componentBlocks: options.componentBlocks
    } : {
      kind: "inline",
      placeholder: options.placeholder,
      formatting: options.formatting === "inherit" ? {
        inlineMarks: "inherit",
        softBreaks: "inherit"
      } : options.formatting,
      links: options.links
    }
  };
}
function conditional(discriminant, values) {
  return {
    kind: "conditional",
    discriminant,
    values
  };
}
function validateDate(validation, value, label) {
  if (value !== null && !/^\d{4}-\d{2}-\d{2}$/.test(value)) {
    return `${label} is not a valid date`;
  }
  if (validation !== null && validation !== void 0 && validation.isRequired && value === null) {
    return `${label} is required`;
  }
  if ((validation !== null && validation !== void 0 && validation.min || validation !== null && validation !== void 0 && validation.max) && value !== null) {
    const date2 = new Date(value);
    if ((validation === null || validation === void 0 ? void 0 : validation.min) !== void 0) {
      const min = new Date(validation.min);
      if (date2 < min) {
        return `${label} must be after ${min.toLocaleDateString()}`;
      }
    }
    if ((validation === null || validation === void 0 ? void 0 : validation.max) !== void 0) {
      const max = new Date(validation.max);
      if (date2 > max) {
        return `${label} must be no later than ${max.toLocaleDateString()}`;
      }
    }
  }
}
function DateFieldInput(props) {
  var _props$validation;
  const [blurred, onBlur] = (0, import_react3.useReducer)(() => true, false);
  return (0, import_jsx_runtime3.jsx)(TextField, {
    label: props.label,
    description: props.description,
    type: "date",
    onChange: (val) => {
      props.onChange(val === "" ? null : val);
    },
    autoFocus: props.autoFocus,
    value: props.value === null ? "" : props.value,
    onBlur,
    isRequired: (_props$validation = props.validation) === null || _props$validation === void 0 ? void 0 : _props$validation.isRequired,
    errorMessage: blurred || props.forceValidation ? validateDate(props.validation, props.value, props.label) : void 0
  });
}
function date({
  label,
  defaultValue,
  validation,
  description
}) {
  return basicFormFieldWithSimpleReaderParse({
    label,
    Input(props) {
      return (0, import_jsx_runtime3.jsx)(DateFieldInput, {
        validation,
        label,
        description,
        ...props
      });
    },
    defaultValue() {
      if (defaultValue === void 0) {
        return null;
      }
      if (typeof defaultValue === "string") {
        return defaultValue;
      }
      const today = /* @__PURE__ */ new Date();
      const year = today.getFullYear();
      const month = String(today.getMonth() + 1).padStart(2, "0");
      const day = String(today.getDate()).padStart(2, "0");
      return `${year}-${month}-${day}`;
    },
    parse(value) {
      if (value === void 0) {
        return null;
      }
      if (typeof value !== "string") {
        throw new FieldDataError("Must be a string");
      }
      return value;
    },
    serialize(value) {
      return {
        value: value === null ? void 0 : value
      };
    },
    validate(value) {
      const message = validateDate(validation, value, label);
      if (message !== void 0) {
        throw new FieldDataError(message);
      }
      assertRequired(value, validation, label);
      return value;
    }
  });
}
function validateDatetime(validation, value, label) {
  if (value !== null && !/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}$/.test(value)) {
    return `${label} is not a valid datetime`;
  }
  if (validation !== null && validation !== void 0 && validation.isRequired && value === null) {
    return `${label} is required`;
  }
  if ((validation !== null && validation !== void 0 && validation.min || validation !== null && validation !== void 0 && validation.max) && value !== null) {
    const datetime2 = new Date(value);
    if ((validation === null || validation === void 0 ? void 0 : validation.min) !== void 0) {
      const min = new Date(validation.min);
      if (datetime2 < min) {
        return `${label} must be after ${min.toISOString()}`;
      }
    }
    if ((validation === null || validation === void 0 ? void 0 : validation.max) !== void 0) {
      const max = new Date(validation.max);
      if (datetime2 > max) {
        return `${label} must be no later than ${max.toISOString()}`;
      }
    }
  }
}
function DatetimeFieldInput(props) {
  var _props$validation;
  const [blurred, onBlur] = (0, import_react3.useReducer)(() => true, false);
  return (0, import_jsx_runtime3.jsx)(TextField, {
    label: props.label,
    description: props.description,
    type: "datetime-local",
    onChange: (val) => {
      props.onChange(val === "" ? null : val);
    },
    autoFocus: props.autoFocus,
    value: props.value === null ? "" : props.value,
    onBlur,
    isRequired: (_props$validation = props.validation) === null || _props$validation === void 0 ? void 0 : _props$validation.isRequired,
    errorMessage: blurred || props.forceValidation ? validateDatetime(props.validation, props.value, props.label) : void 0
  });
}
function datetime({
  label,
  defaultValue,
  validation,
  description
}) {
  return basicFormFieldWithSimpleReaderParse({
    label,
    Input(props) {
      return (0, import_jsx_runtime3.jsx)(DatetimeFieldInput, {
        validation,
        label,
        description,
        ...props
      });
    },
    defaultValue() {
      if (defaultValue === void 0) {
        return null;
      }
      if (typeof defaultValue === "string") {
        return defaultValue;
      }
      if (defaultValue.kind === "now") {
        const now = /* @__PURE__ */ new Date();
        return now.toISOString();
      }
      return null;
    },
    parse(value) {
      if (value === void 0) {
        return null;
      }
      if (typeof value !== "string") {
        throw new FieldDataError("Must be a string");
      }
      return value;
    },
    serialize(value) {
      return {
        value: value === null ? void 0 : value
      };
    },
    validate(value) {
      const message = validateDatetime(validation, value, label);
      if (message !== void 0) {
        throw new FieldDataError(message);
      }
      assertRequired(value, validation, label);
      return value;
    }
  });
}
function emptyDocument() {
  return {
    kind: "form",
    formKind: "content",
    Input() {
      return null;
    },
    defaultValue() {
      return null;
    },
    parse() {
      return null;
    },
    contentExtension: ".mdoc",
    serialize() {
      return {
        value: void 0,
        content: new Uint8Array(),
        external: /* @__PURE__ */ new Map(),
        other: /* @__PURE__ */ new Map()
      };
    },
    validate(value) {
      return value;
    },
    reader: {
      parse() {
        return null;
      }
    }
  };
}
function empty() {
  return basicFormFieldWithSimpleReaderParse({
    Input() {
      return null;
    },
    defaultValue() {
      return null;
    },
    parse() {
      return null;
    },
    serialize() {
      return {
        value: void 0
      };
    },
    validate(value) {
      return value;
    },
    label: "Empty"
  });
}
function image({
  label,
  directory,
  validation,
  description,
  publicPath
}) {
  return {
    kind: "form",
    formKind: "asset",
    label,
    Input(props) {
      return (0, import_jsx_runtime3.jsx)(ImageFieldInput, {
        label,
        description,
        validation,
        ...props
      });
    },
    defaultValue() {
      return null;
    },
    filename(value, args) {
      if (typeof value === "string") {
        return value.slice(getSrcPrefix(publicPath, args.slug).length);
      }
      return void 0;
    },
    parse(value, args) {
      var _value$match$, _value$match;
      if (value === void 0) {
        return null;
      }
      if (typeof value !== "string") {
        throw new FieldDataError("Must be a string");
      }
      if (args.asset === void 0) {
        return null;
      }
      return {
        data: args.asset,
        filename: value.slice(getSrcPrefix(publicPath, args.slug).length),
        extension: (_value$match$ = (_value$match = value.match(/\.([^.]+$)/)) === null || _value$match === void 0 ? void 0 : _value$match[1]) !== null && _value$match$ !== void 0 ? _value$match$ : ""
      };
    },
    validate(value) {
      assertRequired(value, validation, label);
      return value;
    },
    serialize(value, args) {
      if (value === null) {
        return {
          value: void 0,
          asset: void 0
        };
      }
      const filename = args.suggestedFilenamePrefix ? args.suggestedFilenamePrefix + "." + value.extension : value.filename;
      return {
        value: `${getSrcPrefix(publicPath, args.slug)}${filename}`,
        asset: {
          filename,
          content: value.data
        }
      };
    },
    directory: directory ? fixPath(directory) : void 0,
    reader: {
      parse(value) {
        if (typeof value !== "string" && value !== void 0) {
          throw new FieldDataError("Must be a string");
        }
        const val = value === void 0 ? null : value;
        assertRequired(val, validation, label);
        return val;
      }
    }
  };
}
function FileFieldInput(props) {
  var _props$validation, _props$validation2;
  const {
    value
  } = props;
  const [blurred, onBlur] = (0, import_react3.useReducer)(() => true, false);
  const isInEditor = useIsInDocumentEditor();
  const objectUrl = useObjectURL(value === null ? null : value.data);
  const labelId = (0, import_react3.useId)();
  const descriptionId = (0, import_react3.useId)();
  return (0, import_jsx_runtime3.jsxs)(Flex, {
    "aria-describedby": props.description ? descriptionId : void 0,
    "aria-labelledby": labelId,
    direction: "column",
    gap: "medium",
    role: "group",
    children: [(0, import_jsx_runtime3.jsx)(FieldLabel, {
      id: labelId,
      elementType: "span",
      isRequired: (_props$validation = props.validation) === null || _props$validation === void 0 ? void 0 : _props$validation.isRequired,
      children: props.label
    }), props.description && (0, import_jsx_runtime3.jsx)(Text, {
      size: "small",
      color: "neutralSecondary",
      id: descriptionId,
      children: props.description
    }), (0, import_jsx_runtime3.jsxs)(ButtonGroup, {
      children: [(0, import_jsx_runtime3.jsx)(ActionButton, {
        onPress: async () => {
          const file2 = await getUploadedFile("");
          if (file2) {
            var _file$filename$match$, _file$filename$match;
            props.onChange({
              data: file2.content,
              filename: file2.filename,
              extension: (_file$filename$match$ = (_file$filename$match = file2.filename.match(/\.([^.]+$)/)) === null || _file$filename$match === void 0 ? void 0 : _file$filename$match[1]) !== null && _file$filename$match$ !== void 0 ? _file$filename$match$ : ""
            });
          }
        },
        children: "Choose file"
      }), value !== null && (0, import_jsx_runtime3.jsxs)(import_jsx_runtime3.Fragment, {
        children: [(0, import_jsx_runtime3.jsx)(ActionButton, {
          prominence: "low",
          onPress: () => {
            props.onChange(null);
            onBlur();
          },
          children: "Remove"
        }), objectUrl && (0, import_jsx_runtime3.jsx)(Button, {
          href: objectUrl,
          download: value.filename,
          prominence: "low",
          children: "Download"
        })]
      })]
    }), isInEditor && value !== null && (0, import_jsx_runtime3.jsx)(TextField, {
      label: "Filename",
      onChange: (filename) => {
        props.onChange({
          ...value,
          filename
        });
      },
      value: value.filename
    }), (props.forceValidation || blurred) && ((_props$validation2 = props.validation) === null || _props$validation2 === void 0 ? void 0 : _props$validation2.isRequired) && value === null && (0, import_jsx_runtime3.jsxs)(FieldMessage, {
      children: [props.label, " is required"]
    })]
  });
}
function file({
  label,
  directory,
  validation,
  description,
  publicPath
}) {
  return {
    kind: "form",
    formKind: "asset",
    label,
    Input(props) {
      return (0, import_jsx_runtime3.jsx)(FileFieldInput, {
        label,
        description,
        validation,
        ...props
      });
    },
    defaultValue() {
      return null;
    },
    filename(value, args) {
      if (typeof value === "string") {
        return value.slice(getSrcPrefix(publicPath, args.slug).length);
      }
      return void 0;
    },
    parse(value, args) {
      var _value$match$, _value$match;
      if (value === void 0) {
        return null;
      }
      if (typeof value !== "string") {
        throw new FieldDataError("Must be a string");
      }
      if (args.asset === void 0) {
        return null;
      }
      return {
        data: args.asset,
        filename: value.slice(getSrcPrefix(publicPath, args.slug).length),
        extension: (_value$match$ = (_value$match = value.match(/\.([^.]+$)/)) === null || _value$match === void 0 ? void 0 : _value$match[1]) !== null && _value$match$ !== void 0 ? _value$match$ : ""
      };
    },
    validate(value) {
      assertRequired(value, validation, label);
      return value;
    },
    serialize(value, args) {
      if (value === null) {
        return {
          value: void 0,
          asset: void 0
        };
      }
      const filename = args.suggestedFilenamePrefix ? args.suggestedFilenamePrefix + "." + value.extension : value.filename;
      return {
        value: `${getSrcPrefix(publicPath, args.slug)}${filename}`,
        asset: {
          filename,
          content: value.data
        }
      };
    },
    directory: directory ? fixPath(directory) : void 0,
    reader: {
      parse(value) {
        if (typeof value !== "string" && value !== void 0) {
          throw new FieldDataError("Must be a string");
        }
        const val = value === void 0 ? null : value;
        assertRequired(val, validation, label);
        return val;
      }
    }
  };
}
function validateNumber(validation, value, step, label) {
  if (value !== null && typeof value !== "number") {
    return `${label} must be a number`;
  }
  if (validation !== null && validation !== void 0 && validation.isRequired && value === null) {
    return `${label} is required`;
  }
  if (value !== null) {
    if ((validation === null || validation === void 0 ? void 0 : validation.min) !== void 0 && value < validation.min) {
      return `${label} must be at least ${validation.min}`;
    }
    if ((validation === null || validation === void 0 ? void 0 : validation.max) !== void 0 && value > validation.max) {
      return `${label} must be at most ${validation.max}`;
    }
    if (step !== void 0 && (validation === null || validation === void 0 ? void 0 : validation.validateStep) !== void 0 && new decimal_default(value).mod(new decimal_default(step)).toNumber() !== 0) {
      return `${label} must be a multiple of ${step}`;
    }
  }
}
function NumberFieldInput(props) {
  var _props$validation;
  const [blurred, onBlur] = (0, import_react3.useReducer)(() => true, false);
  return (0, import_jsx_runtime3.jsx)(NumberField, {
    label: props.label,
    description: props.description,
    isRequired: (_props$validation = props.validation) === null || _props$validation === void 0 ? void 0 : _props$validation.isRequired,
    errorMessage: props.forceValidation || blurred ? validateNumber(props.validation, props.value, props.step, props.label) : void 0,
    onBlur,
    autoFocus: props.autoFocus,
    step: props.step,
    value: props.value === null ? void 0 : props.value,
    onChange: (val) => {
      props.onChange(val === void 0 ? null : val);
    }
  });
}
function number({
  label,
  defaultValue,
  step,
  validation,
  description
}) {
  return basicFormFieldWithSimpleReaderParse({
    label,
    Input(props) {
      return (0, import_jsx_runtime3.jsx)(NumberFieldInput, {
        label,
        description,
        validation,
        step,
        ...props
      });
    },
    defaultValue() {
      return defaultValue !== null && defaultValue !== void 0 ? defaultValue : null;
    },
    parse(value) {
      if (value === void 0) {
        return null;
      }
      if (typeof value === "number") {
        return value;
      }
      throw new FieldDataError("Must be a number");
    },
    validate(value) {
      const message = validateNumber(validation, value, step, label);
      if (message !== void 0) {
        throw new FieldDataError(message);
      }
      assertRequired(value, validation, label);
      return value;
    },
    serialize(value) {
      return {
        value: value === null ? void 0 : value
      };
    }
  });
}
function MultiselectFieldInput(props) {
  const labelId = (0, import_react3.useId)();
  const descriptionId = (0, import_react3.useId)();
  return (0, import_jsx_runtime3.jsxs)(Flex, {
    role: "group",
    "aria-labelledby": labelId,
    "aria-describedby": props.description ? descriptionId : void 0,
    direction: "column",
    gap: "medium",
    children: [(0, import_jsx_runtime3.jsx)(FieldLabel, {
      elementType: "span",
      id: labelId,
      children: props.label
    }), props.description && (0, import_jsx_runtime3.jsx)(Text, {
      id: descriptionId,
      size: "small",
      color: "neutralSecondary",
      children: props.description
    }), props.options.map((option) => (0, import_jsx_runtime3.jsx)(Checkbox, {
      isSelected: props.value.includes(option.value),
      onChange: () => {
        if (props.value.includes(option.value)) {
          props.onChange(props.value.filter((x) => x !== option.value));
        } else {
          props.onChange([...props.value, option.value]);
        }
      },
      children: option.label
    }, option.value))]
  });
}
function multiselect({
  label,
  options,
  defaultValue = [],
  description
}) {
  const valuesToOption = new Map(options.map((x) => [x.value, x]));
  const field = basicFormFieldWithSimpleReaderParse({
    label,
    Input(props) {
      return (0, import_jsx_runtime3.jsx)(MultiselectFieldInput, {
        label,
        description,
        options,
        ...props
      });
    },
    defaultValue() {
      return defaultValue;
    },
    parse(value) {
      if (value === void 0) {
        return [];
      }
      if (!Array.isArray(value)) {
        throw new FieldDataError("Must be an array of options");
      }
      if (!value.every((x) => typeof x === "string" && valuesToOption.has(x))) {
        throw new FieldDataError(`Must be an array with one of ${options.map((x) => x.value).join(", ")}`);
      }
      return value;
    },
    validate(value) {
      return value;
    },
    serialize(value) {
      return {
        value
      };
    }
  });
  return {
    ...field,
    options
  };
}
function PathReferenceInput(props) {
  var _props$validation, _props$validation2;
  const match = (0, import_react3.useMemo)(() => props.pattern ? filter(props.pattern) : () => true, [props.pattern]);
  const [blurred, onBlur] = (0, import_react3.useReducer)(() => true, false);
  const tree = useTree().current;
  const options = (0, import_react3.useMemo)(() => {
    const files = tree.kind === "loaded" ? [...tree.data.entries.values()] : [];
    return files.filter((val) => match(val.path));
  }, [tree, match]);
  const _errorMessage = (props.forceValidation || blurred) && (_props$validation = props.validation) !== null && _props$validation !== void 0 && _props$validation.isRequired && props.value === null ? `${props.label} is required` : void 0;
  const [errorMessage, setErrorMessage] = (0, import_react3.useState)(_errorMessage);
  (0, import_react3.useEffect)(() => {
    setErrorMessage(_errorMessage);
  }, [_errorMessage]);
  return (0, import_jsx_runtime3.jsx)(_Combobox, {
    label: props.label,
    description: props.description,
    selectedKey: props.value,
    onSelectionChange: (key) => {
      if (typeof key === "string" || key === null) {
        props.onChange(key);
      }
    },
    onBlur,
    isRequired: (_props$validation2 = props.validation) === null || _props$validation2 === void 0 ? void 0 : _props$validation2.isRequired,
    errorMessage,
    autoFocus: props.autoFocus,
    defaultItems: options,
    width: "auto",
    children: (item) => (0, import_jsx_runtime3.jsx)($c1d7fb2ec91bae71$export$6d08773d2e66f8f2, {
      children: item.path
    }, item.path)
  });
}
function pathReference({
  label,
  pattern,
  validation,
  description
}) {
  return basicFormFieldWithSimpleReaderParse({
    label,
    Input(props) {
      return (0, import_jsx_runtime3.jsx)(PathReferenceInput, {
        label,
        pattern,
        description,
        validation,
        ...props
      });
    },
    defaultValue() {
      return null;
    },
    parse(value) {
      if (value === void 0) {
        return null;
      }
      if (typeof value !== "string") {
        throw new FieldDataError("Must be a string");
      }
      return value;
    },
    validate(value) {
      assertRequired(value, validation, label);
      return value;
    },
    serialize(value) {
      return {
        value: value === null ? void 0 : value
      };
    }
  });
}
function RelationshipInput(props) {
  var _props$validation, _props$validation2;
  const [blurred, onBlur] = (0, import_react3.useReducer)(() => true, false);
  const slugs = useSlugsInCollection(props.collection);
  const options = (0, import_react3.useMemo)(() => {
    return slugs.map((slug2) => ({
      slug: slug2
    }));
  }, [slugs]);
  const _errorMessage = (props.forceValidation || blurred) && (_props$validation = props.validation) !== null && _props$validation !== void 0 && _props$validation.isRequired && props.value === null ? `${props.label} is required` : void 0;
  const [errorMessage, setErrorMessage] = (0, import_react3.useState)(_errorMessage);
  (0, import_react3.useEffect)(() => {
    setErrorMessage(_errorMessage);
  }, [_errorMessage]);
  return (0, import_jsx_runtime3.jsx)(_Combobox, {
    label: props.label,
    description: props.description,
    selectedKey: props.value,
    onSelectionChange: (key) => {
      if (typeof key === "string" || key === null) {
        props.onChange(key);
      }
    },
    onBlur,
    autoFocus: props.autoFocus,
    defaultItems: options,
    isRequired: (_props$validation2 = props.validation) === null || _props$validation2 === void 0 ? void 0 : _props$validation2.isRequired,
    errorMessage,
    width: "auto",
    children: (item) => (0, import_jsx_runtime3.jsx)($c1d7fb2ec91bae71$export$6d08773d2e66f8f2, {
      children: item.slug
    }, item.slug)
  });
}
function relationship({
  label,
  collection: collection2,
  validation,
  description
}) {
  return basicFormFieldWithSimpleReaderParse({
    label,
    Input(props) {
      return (0, import_jsx_runtime3.jsx)(RelationshipInput, {
        label,
        collection: collection2,
        description,
        validation,
        ...props
      });
    },
    defaultValue() {
      return null;
    },
    parse(value) {
      if (value === void 0) {
        return null;
      }
      if (typeof value !== "string") {
        throw new FieldDataError("Must be a string");
      }
      return value;
    },
    validate(value) {
      assertRequired(value, validation, label);
      return value;
    },
    serialize(value) {
      return {
        value: value === null ? void 0 : value
      };
    }
  });
}
function SelectFieldInput(props) {
  let fieldContext = useFieldContext();
  return (0, import_jsx_runtime3.jsx)(_Picker, {
    label: props.label,
    description: props.description,
    items: props.options,
    selectedKey: props.value,
    onSelectionChange: (key) => {
      props.onChange(key);
    },
    autoFocus: props.autoFocus,
    width: {
      mobile: "auto",
      tablet: fieldContext.span === 12 ? "alias.singleLineWidth" : "auto"
    },
    children: (item) => (0, import_jsx_runtime3.jsx)($c1d7fb2ec91bae71$export$6d08773d2e66f8f2, {
      children: item.label
    }, item.value)
  });
}
function select({
  label,
  options,
  defaultValue,
  description
}) {
  const optionValuesSet = new Set(options.map((x) => x.value));
  if (!optionValuesSet.has(defaultValue)) {
    throw new Error(`A defaultValue of ${defaultValue} was provided to a select field but it does not match the value of one of the options provided`);
  }
  const field = basicFormFieldWithSimpleReaderParse({
    label,
    Input(props) {
      return (0, import_jsx_runtime3.jsx)(SelectFieldInput, {
        label,
        options,
        description,
        ...props
      });
    },
    defaultValue() {
      return defaultValue;
    },
    parse(value) {
      if (value === void 0) {
        return defaultValue;
      }
      if (typeof value !== "string") {
        throw new FieldDataError("Must be a string");
      }
      if (!optionValuesSet.has(value)) {
        throw new FieldDataError("Must be a valid option");
      }
      return value;
    },
    validate(value) {
      return value;
    },
    serialize(value) {
      return {
        value
      };
    }
  });
  return {
    ...field,
    options
  };
}
var emptySet = /* @__PURE__ */ new Set();
function SlugFieldInput(props) {
  var _props$args$slug$vali, _props$args$slug, _props$args$slug$vali2, _props$args$slug2, _props$args$slug$labe, _props$args$slug3, _props$args$name$vali, _props$args$name$vali2, _props$args$name$vali3, _props$args$name$vali4, _props$args$name$vali5, _props$args$slug$labe2, _props$args$slug4, _props$args$slug5;
  const slugContext = (0, import_react3.useContext)(SlugFieldContext);
  const path = (0, import_react3.useContext)(PathContext);
  const slugInfo = path.length === 1 && path[0] === (slugContext === null || slugContext === void 0 ? void 0 : slugContext.field) ? slugContext : {
    slugs: emptySet,
    glob: "*"
  };
  const [blurredName, setBlurredName] = (0, import_react3.useState)(false);
  const [blurredSlug, setBlurredSlug] = (0, import_react3.useState)(false);
  const [shouldGenerateSlug, setShouldGenerateSlug] = (0, import_react3.useState)(props.value === props.defaultValue);
  const generateSlug = (name) => {
    const generated = props.naiveGenerateSlug(name);
    if (slugInfo.slugs.has(generated)) {
      let i = 1;
      while (slugInfo.slugs.has(`${generated}-${i}`)) {
        i++;
      }
      return `${generated}-${i}`;
    }
    return generated;
  };
  const slugErrorMessage = props.forceValidation || blurredSlug ? validateText(props.value.slug, (_props$args$slug$vali = (_props$args$slug = props.args.slug) === null || _props$args$slug === void 0 || (_props$args$slug = _props$args$slug.validation) === null || _props$args$slug === void 0 || (_props$args$slug = _props$args$slug.length) === null || _props$args$slug === void 0 ? void 0 : _props$args$slug.min) !== null && _props$args$slug$vali !== void 0 ? _props$args$slug$vali : 1, (_props$args$slug$vali2 = (_props$args$slug2 = props.args.slug) === null || _props$args$slug2 === void 0 || (_props$args$slug2 = _props$args$slug2.validation) === null || _props$args$slug2 === void 0 || (_props$args$slug2 = _props$args$slug2.length) === null || _props$args$slug2 === void 0 ? void 0 : _props$args$slug2.max) !== null && _props$args$slug$vali2 !== void 0 ? _props$args$slug$vali2 : Infinity, (_props$args$slug$labe = (_props$args$slug3 = props.args.slug) === null || _props$args$slug3 === void 0 ? void 0 : _props$args$slug3.label) !== null && _props$args$slug$labe !== void 0 ? _props$args$slug$labe : "Slug", slugInfo) : void 0;
  return (0, import_jsx_runtime3.jsxs)(Flex, {
    gap: "xlarge",
    direction: "column",
    children: [(0, import_jsx_runtime3.jsx)(TextField, {
      label: props.args.name.label,
      description: props.args.name.description,
      autoFocus: props.autoFocus,
      value: props.value.name,
      isRequired: !!((_props$args$name$vali = props.args.name.validation) !== null && _props$args$name$vali !== void 0 && (_props$args$name$vali = _props$args$name$vali.length) !== null && _props$args$name$vali !== void 0 && _props$args$name$vali.min),
      onChange: (name) => {
        props.onChange({
          name,
          slug: shouldGenerateSlug ? generateSlug(name) : props.value.slug
        });
      },
      onBlur: () => setBlurredName(true),
      errorMessage: props.forceValidation || blurredName ? validateText(props.value.name, (_props$args$name$vali2 = (_props$args$name$vali3 = props.args.name.validation) === null || _props$args$name$vali3 === void 0 || (_props$args$name$vali3 = _props$args$name$vali3.length) === null || _props$args$name$vali3 === void 0 ? void 0 : _props$args$name$vali3.min) !== null && _props$args$name$vali2 !== void 0 ? _props$args$name$vali2 : 0, (_props$args$name$vali4 = (_props$args$name$vali5 = props.args.name.validation) === null || _props$args$name$vali5 === void 0 || (_props$args$name$vali5 = _props$args$name$vali5.length) === null || _props$args$name$vali5 === void 0 ? void 0 : _props$args$name$vali5.max) !== null && _props$args$name$vali4 !== void 0 ? _props$args$name$vali4 : Infinity, props.args.name.label, void 0) : void 0
    }), (0, import_jsx_runtime3.jsxs)(Flex, {
      gap: "regular",
      alignItems: "end",
      children: [(0, import_jsx_runtime3.jsx)(TextField, {
        flex: 1,
        label: (_props$args$slug$labe2 = (_props$args$slug4 = props.args.slug) === null || _props$args$slug4 === void 0 ? void 0 : _props$args$slug4.label) !== null && _props$args$slug$labe2 !== void 0 ? _props$args$slug$labe2 : "Slug",
        description: (_props$args$slug5 = props.args.slug) === null || _props$args$slug5 === void 0 ? void 0 : _props$args$slug5.description,
        value: props.value.slug,
        onChange: (slug2) => {
          setShouldGenerateSlug(false);
          props.onChange({
            name: props.value.name,
            slug: slug2
          });
        },
        onBlur: () => setBlurredSlug(true),
        errorMessage: slugErrorMessage,
        isRequired: true
      }), (0, import_jsx_runtime3.jsxs)(Flex, {
        gap: "regular",
        direction: "column",
        children: [(0, import_jsx_runtime3.jsx)(ActionButton, {
          onPress: () => {
            props.onChange({
              name: props.value.name,
              slug: generateSlug(props.value.name)
            });
          },
          children: "Regenerate"
        }), slugErrorMessage !== void 0 && (0, import_jsx_runtime3.jsx)(Box, {
          height: "element.xsmall"
        })]
      })]
    })]
  });
}
function parseSlugFieldAsNormalField(value) {
  if (value === void 0) {
    return {
      name: "",
      slug: ""
    };
  }
  if (typeof value !== "object") {
    throw new FieldDataError("Must be an object");
  }
  if (Object.keys(value).length !== 2) {
    throw new FieldDataError("Unexpected keys");
  }
  if (!("name" in value) || !("slug" in value)) {
    throw new FieldDataError("Missing name or slug");
  }
  if (typeof value.name !== "string") {
    throw new FieldDataError("name must be a string");
  }
  if (typeof value.slug !== "string") {
    throw new FieldDataError("slug must be a string");
  }
  return {
    name: value.name,
    slug: value.slug
  };
}
function parseAsSlugField(value, slug2) {
  if (value === void 0) {
    return {
      name: "",
      slug: slug2
    };
  }
  if (typeof value !== "string") {
    throw new FieldDataError("Must be a string");
  }
  return {
    name: value,
    slug: slug2
  };
}
function slug(args) {
  var _args$slug, _args$name$defaultVal, _args$name$defaultVal2;
  const naiveGenerateSlug = ((_args$slug = args.slug) === null || _args$slug === void 0 ? void 0 : _args$slug.generate) || import_slugify2.default;
  const defaultValue = {
    name: (_args$name$defaultVal = args.name.defaultValue) !== null && _args$name$defaultVal !== void 0 ? _args$name$defaultVal : "",
    slug: naiveGenerateSlug((_args$name$defaultVal2 = args.name.defaultValue) !== null && _args$name$defaultVal2 !== void 0 ? _args$name$defaultVal2 : "")
  };
  function validate(value, {
    slugField
  } = {
    slugField: void 0
  }) {
    var _args$name$validation, _args$name$validation2, _args$name$validation3, _args$name$validation4, _args$slug$validation, _args$slug2, _args$slug$validation2, _args$slug3, _args$slug$label, _args$slug4;
    const nameMessage = validateText(value.name, (_args$name$validation = (_args$name$validation2 = args.name.validation) === null || _args$name$validation2 === void 0 || (_args$name$validation2 = _args$name$validation2.length) === null || _args$name$validation2 === void 0 ? void 0 : _args$name$validation2.min) !== null && _args$name$validation !== void 0 ? _args$name$validation : 0, (_args$name$validation3 = (_args$name$validation4 = args.name.validation) === null || _args$name$validation4 === void 0 || (_args$name$validation4 = _args$name$validation4.length) === null || _args$name$validation4 === void 0 ? void 0 : _args$name$validation4.max) !== null && _args$name$validation3 !== void 0 ? _args$name$validation3 : Infinity, args.name.label, void 0);
    if (nameMessage !== void 0) {
      throw new FieldDataError(nameMessage);
    }
    const slugMessage = validateText(value.slug, (_args$slug$validation = (_args$slug2 = args.slug) === null || _args$slug2 === void 0 || (_args$slug2 = _args$slug2.validation) === null || _args$slug2 === void 0 || (_args$slug2 = _args$slug2.length) === null || _args$slug2 === void 0 ? void 0 : _args$slug2.min) !== null && _args$slug$validation !== void 0 ? _args$slug$validation : 1, (_args$slug$validation2 = (_args$slug3 = args.slug) === null || _args$slug3 === void 0 || (_args$slug3 = _args$slug3.validation) === null || _args$slug3 === void 0 || (_args$slug3 = _args$slug3.length) === null || _args$slug3 === void 0 ? void 0 : _args$slug3.max) !== null && _args$slug$validation2 !== void 0 ? _args$slug$validation2 : Infinity, (_args$slug$label = (_args$slug4 = args.slug) === null || _args$slug4 === void 0 ? void 0 : _args$slug4.label) !== null && _args$slug$label !== void 0 ? _args$slug$label : "Slug", slugField ? slugField : {
      slugs: emptySet2,
      glob: "*"
    });
    if (slugMessage !== void 0) {
      throw new FieldDataError(slugMessage);
    }
    return value;
  }
  const emptySet2 = /* @__PURE__ */ new Set();
  return {
    kind: "form",
    formKind: "slug",
    label: args.name.label,
    Input(props) {
      return (0, import_jsx_runtime3.jsx)(SlugFieldInput, {
        args,
        naiveGenerateSlug,
        defaultValue,
        ...props
      });
    },
    defaultValue() {
      return defaultValue;
    },
    parse(value, args2) {
      if ((args2 === null || args2 === void 0 ? void 0 : args2.slug) !== void 0) {
        return parseAsSlugField(value, args2.slug);
      }
      return parseSlugFieldAsNormalField(value);
    },
    validate,
    serialize(value) {
      return {
        value
      };
    },
    serializeWithSlug(value) {
      return {
        value: value.name,
        slug: value.slug
      };
    },
    reader: {
      parse(value) {
        const parsed = parseSlugFieldAsNormalField(value);
        return validate(parsed);
      },
      parseWithSlug(value, args2) {
        return validate(parseAsSlugField(value, args2.slug), {
          slugField: {
            glob: args2.glob,
            slugs: emptySet2
          }
        }).name;
      }
    }
  };
}
function validateUrl(validation, value, label) {
  if (value !== null && (typeof value !== "string" || !isValidURL(value))) {
    return `${label} is not a valid URL`;
  }
  if (validation !== null && validation !== void 0 && validation.isRequired && value === null) {
    return `${label} is required`;
  }
}
function UrlFieldInput(props) {
  var _props$validation;
  const [blurred, onBlur] = (0, import_react3.useReducer)(() => true, false);
  return (0, import_jsx_runtime3.jsx)(TextField, {
    width: "auto",
    maxWidth: "scale.6000",
    label: props.label,
    description: props.description,
    autoFocus: props.autoFocus,
    value: props.value === null ? "" : props.value,
    onChange: (val) => {
      props.onChange(val === "" ? null : val);
    },
    onBlur,
    isRequired: (_props$validation = props.validation) === null || _props$validation === void 0 ? void 0 : _props$validation.isRequired,
    errorMessage: props.forceValidation || blurred ? validateUrl(props.validation, props.value, props.label) : void 0
  });
}
function url({
  label,
  defaultValue,
  validation,
  description
}) {
  return basicFormFieldWithSimpleReaderParse({
    label,
    Input(props) {
      return (0, import_jsx_runtime3.jsx)(UrlFieldInput, {
        label,
        description,
        validation,
        ...props
      });
    },
    defaultValue() {
      return defaultValue || null;
    },
    parse(value) {
      if (value === void 0) {
        return null;
      }
      if (typeof value !== "string") {
        throw new FieldDataError("Must be a string");
      }
      return value === "" ? null : value;
    },
    validate(value) {
      const message = validateUrl(validation, value, label);
      if (message !== void 0) {
        throw new FieldDataError(message);
      }
      assertRequired(value, validation, label);
      return value;
    },
    serialize(value) {
      return {
        value: value === null ? void 0 : value
      };
    }
  });
}
function BlocksFieldInput(props) {
  const labelId = (0, import_react3.useId)();
  const descriptionId = (0, import_react3.useId)();
  const stringFormatter = $fca6afa0e843324b$export$f12b703ca79dfbb1(l10nMessages);
  const [modalState, setModalState] = (0, import_react3.useState)({
    kind: "closed"
  });
  const dismiss = () => {
    setModalState({
      kind: "closed"
    });
  };
  const formId = (0, import_react3.useId)();
  return (0, import_jsx_runtime3.jsxs)(Flex, {
    elementType: "section",
    gap: "medium",
    role: "group",
    "aria-labelledby": labelId,
    "aria-describedby": props.schema.description ? descriptionId : void 0,
    direction: "column",
    children: [(0, import_jsx_runtime3.jsx)(FieldLabel, {
      elementType: "h3",
      id: labelId,
      children: props.schema.label
    }), props.schema.description && (0, import_jsx_runtime3.jsx)(Text, {
      id: descriptionId,
      size: "small",
      color: "neutralSecondary",
      children: props.schema.description
    }), (0, import_jsx_runtime3.jsxs)(MenuTrigger, {
      children: [(0, import_jsx_runtime3.jsx)(ActionButton, {
        alignSelf: "start",
        children: "Add"
      }), (0, import_jsx_runtime3.jsx)(_Menu, {
        items: props.schema.element.discriminant.options,
        onAction: (discriminant) => {
          var _props$schema$element;
          const val = (_props$schema$element = props.schema.element.discriminant.options.find((x) => x.value.toString() === discriminant.toString())) === null || _props$schema$element === void 0 ? void 0 : _props$schema$element.value;
          if (val === void 0)
            return;
          setModalState({
            kind: "new",
            discriminant: val
          });
        },
        children: (item) => (0, import_jsx_runtime3.jsx)($c1d7fb2ec91bae71$export$6d08773d2e66f8f2, {
          children: item.label
        }, item.value.toString())
      })]
    }), (0, import_jsx_runtime3.jsx)(ArrayFieldListView, {
      ...props,
      labelId,
      onOpenItem: (idx) => {
        setModalState({
          kind: "edit",
          idx
        });
      }
    }), (0, import_jsx_runtime3.jsx)(ArrayFieldValidationMessages, {
      ...props
    }), (0, import_jsx_runtime3.jsx)(DialogContainer, {
      onDismiss: dismiss,
      children: ((_props$schema$element3) => {
        if (modalState.kind === "closed") {
          return null;
        }
        if (modalState.kind === "edit") {
          var _props$schema$element2;
          const idx = modalState.idx;
          const previewProps = props.elements[idx].value;
          const {
            discriminant: discriminant2
          } = props.elements[idx];
          return (0, import_jsx_runtime3.jsxs)(Dialog, {
            children: [(0, import_jsx_runtime3.jsxs)(Heading, {
              children: ["Edit", " ", (_props$schema$element2 = props.schema.element.discriminant.options.find((x) => x.value === discriminant2)) === null || _props$schema$element2 === void 0 ? void 0 : _props$schema$element2.label]
            }), (0, import_jsx_runtime3.jsx)(BlocksEditItemModalContent, {
              formId,
              onClose: dismiss,
              previewProps,
              modalStateIndex: idx
            }), (0, import_jsx_runtime3.jsx)(ButtonGroup, {
              children: (0, import_jsx_runtime3.jsx)(Button, {
                form: formId,
                prominence: "high",
                type: "submit",
                children: "Done"
              })
            })]
          });
        }
        const discriminant = modalState.discriminant;
        return (0, import_jsx_runtime3.jsxs)(Dialog, {
          children: [(0, import_jsx_runtime3.jsxs)(Heading, {
            children: ["Add", (_props$schema$element3 = props.schema.element.discriminant.options.find((x) => x.value === discriminant)) === null || _props$schema$element3 === void 0 ? void 0 : _props$schema$element3.label]
          }), (0, import_jsx_runtime3.jsx)(Content, {
            children: (0, import_jsx_runtime3.jsx)(BlocksAddItemModalContent, {
              discriminant,
              formId,
              previewProps: props
            })
          }), (0, import_jsx_runtime3.jsxs)(ButtonGroup, {
            children: [(0, import_jsx_runtime3.jsx)(Button, {
              onPress: dismiss,
              children: stringFormatter.format("cancel")
            }), (0, import_jsx_runtime3.jsx)(Button, {
              form: formId,
              prominence: "high",
              type: "submit",
              children: stringFormatter.format("add")
            })]
          })]
        });
      })()
    })]
  });
}
function BlocksEditItemModalContent(props) {
  return (0, import_jsx_runtime3.jsx)(Content, {
    children: (0, import_jsx_runtime3.jsx)(Flex, {
      id: props.formId,
      elementType: "form",
      onSubmit: (event) => {
        if (event.target !== event.currentTarget)
          return;
        event.preventDefault();
        props.onClose();
      },
      direction: "column",
      gap: "xxlarge",
      children: (0, import_jsx_runtime3.jsx)(FormValueContentFromPreviewProps, {
        autoFocus: true,
        ...props.previewProps
      })
    })
  });
}
function BlocksAddItemModalContent(props) {
  const schema = props.previewProps.schema.element.values[props.discriminant.toString()];
  console.log(schema);
  const [value, setValue] = (0, import_react3.useState)(() => getInitialPropsValue(schema));
  const [forceValidation, setForceValidation] = (0, import_react3.useState)(false);
  const previewProps = (0, import_react3.useMemo)(() => createGetPreviewProps(schema, setValue, () => void 0), [schema, setValue])(value);
  const {
    dismiss
  } = useDialogContainer();
  return (0, import_jsx_runtime3.jsx)(Flex, {
    id: props.formId,
    elementType: "form",
    onSubmit: (event) => {
      if (event.target !== event.currentTarget)
        return;
      event.preventDefault();
      if (!clientSideValidateProp(schema, value, void 0)) {
        setForceValidation(true);
        return;
      }
      props.previewProps.onChange([...props.previewProps.elements.map((x) => ({
        key: x.key
      })), {
        key: void 0,
        value: valueToUpdater({
          value,
          discriminant: props.discriminant
        }, props.previewProps.schema.element)
      }]);
      dismiss();
    },
    direction: "column",
    gap: "xxlarge",
    children: (0, import_jsx_runtime3.jsx)(FormValueContentFromPreviewProps, {
      forceValidation,
      autoFocus: true,
      ...previewProps
    })
  });
}
function blocks(blocks2, opts) {
  const entries = Object.entries(blocks2);
  if (!entries.length) {
    throw new Error("fields.blocks must have at least one entry");
  }
  const select$1 = select({
    label: "Kind",
    defaultValue: entries[0][0],
    options: Object.entries(blocks2).map(([key, {
      label
    }]) => ({
      label,
      value: key
    }))
  });
  const element = conditional(select$1, Object.fromEntries(entries.map(([key, {
    schema
  }]) => [key, schema])));
  return {
    ...array(element, {
      label: opts.label,
      description: opts.description,
      validation: opts.validation,
      itemLabel(props) {
        const kind = props.discriminant;
        const block = blocks2[kind];
        if (!block.itemLabel)
          return block.label;
        return block.itemLabel(props.value);
      }
    }),
    Input: BlocksFieldInput
  };
}
function ImageField(props) {
  const {
    image: image2,
    onChange
  } = props;
  const [status, setStatus] = (0, import_react3.useState)(image2.src ? "good" : "");
  const imageLibraryURL = useImageLibraryURL();
  const onPaste = (event) => {
    event.preventDefault();
    const text2 = event.clipboardData.getData("text/plain");
    const parsed = parseImageData(text2);
    props.onChange(parsed);
  };
  const onLoad = useEventCallback((data) => {
    onChange(data);
    setStatus("good");
  });
  const config2 = useConfig();
  const hasSetFields = !!(props.image.alt || props.image.width || props.image.height);
  (0, import_react3.useEffect)(() => {
    if (!props.image.src) {
      setStatus("");
      return;
    }
    if (!isValidURL(props.image.src)) {
      return;
    }
    if (hasSetFields) {
      setStatus("good");
      return;
    }
    setStatus("loading");
    loadImageData(props.image.src, config2).then((newData) => {
      onLoad(newData);
    }).catch(() => {
      setStatus("error");
    });
  }, [config2, hasSetFields, onLoad, props.image.src]);
  const [blurred, setBlurred] = (0, import_react3.useState)(false);
  const errorMessage = (blurred || props.forceValidation) && props.isRequired && !image2.src ? "Image URL is required" : void 0;
  return (0, import_jsx_runtime3.jsxs)(VStack, {
    gap: "xlarge",
    children: [(0, import_jsx_runtime3.jsx)(TextField, {
      label: "Image URL",
      errorMessage,
      autoFocus: props.autoFocus,
      onPaste,
      onKeyDown: (e) => {
        if (e.code === "Backspace" || e.code === "Delete") {
          props.onChange(emptyImageData);
        }
      },
      onBlur: () => setBlurred(true),
      value: image2.src,
      description: (0, import_jsx_runtime3.jsxs)(Text, {
        children: ["Copy an image URL from the", " ", (0, import_jsx_runtime3.jsx)(TextLink, {
          prominence: "high",
          href: imageLibraryURL,
          target: "_blank",
          rel: "noreferrer",
          children: "Image Library"
        }), " ", "and paste it into this field."]
      }),
      endElement: status === "loading" ? (0, import_jsx_runtime3.jsx)(Flex, {
        height: "element.regular",
        width: "element.regular",
        alignItems: "center",
        justifyContent: "center",
        children: (0, import_jsx_runtime3.jsx)(ProgressCircle, {
          size: "small",
          "aria-label": "Checking…",
          isIndeterminate: true
        })
      }) : image2.src ? (0, import_jsx_runtime3.jsx)(ClearButton, {
        onPress: () => {
          props.onChange(emptyImageData);
          setStatus("");
        },
        preventFocus: true
      }) : null
    }), status === "good" ? (0, import_jsx_runtime3.jsxs)(import_jsx_runtime3.Fragment, {
      children: [(0, import_jsx_runtime3.jsx)(Box, {
        width: "scale.1600",
        height: "scale.1600",
        children: (0, import_jsx_runtime3.jsx)("img", {
          alt: image2.alt,
          src: image2.src,
          style: {
            objectFit: "contain",
            height: "100%",
            width: "100%"
          }
        })
      }), (0, import_jsx_runtime3.jsx)(TextArea, {
        label: "Alt text",
        value: image2.alt,
        onChange: (alt) => props.onChange({
          ...image2,
          alt
        })
      }), (0, import_jsx_runtime3.jsx)(ImageDimensionsInput, {
        src: image2.src,
        image: image2,
        onChange: (dimensions) => {
          onChange({
            ...props.image,
            ...dimensions
          });
        }
      })]
    }) : null]
  });
}
function CloudImageFieldInput(props) {
  var _props$fields$width$v, _props$fields$height$;
  const labelId = (0, import_react3.useId)();
  const descriptionId = (0, import_react3.useId)();
  return (0, import_jsx_runtime3.jsxs)(Flex, {
    role: "group",
    gap: "medium",
    marginY: "large",
    "aria-labelledby": labelId,
    "aria-describedby": props.schema.description ? descriptionId : void 0,
    direction: "column",
    children: [(0, import_jsx_runtime3.jsx)(Text, {
      color: "neutral",
      size: "medium",
      weight: "medium",
      id: labelId,
      children: props.schema.label
    }), !!props.schema.description && (0, import_jsx_runtime3.jsx)(Text, {
      id: descriptionId,
      size: "regular",
      color: "neutralSecondary",
      children: props.schema.description
    }), (0, import_jsx_runtime3.jsx)(ImageField, {
      image: {
        src: props.fields.src.value,
        alt: props.fields.alt.value,
        width: (_props$fields$width$v = props.fields.width.value) !== null && _props$fields$width$v !== void 0 ? _props$fields$width$v : void 0,
        height: (_props$fields$height$ = props.fields.height.value) !== null && _props$fields$height$ !== void 0 ? _props$fields$height$ : void 0
      },
      onChange: (data) => {
        var _data$width, _data$height;
        props.onChange({
          src: data.src,
          alt: data.alt,
          width: (_data$width = data.width) !== null && _data$width !== void 0 ? _data$width : null,
          height: (_data$height = data.height) !== null && _data$height !== void 0 ? _data$height : null
        });
      },
      autoFocus: props.autoFocus,
      isRequired: props.isRequired,
      forceValidation: props.forceValidation
    })]
  });
}
function cloudImage({
  label,
  description,
  validation
}) {
  return {
    ...object({
      src: text({
        label: "URL",
        validation: {
          length: {
            min: validation !== null && validation !== void 0 && validation.isRequired ? 1 : 0
          }
        }
      }),
      alt: text({
        label: "Alt text"
      }),
      height: integer({
        label: "Height"
      }),
      width: integer({
        label: "Width"
      })
    }, {
      label,
      description
    }),
    Input(props) {
      return (0, import_jsx_runtime3.jsx)(CloudImageFieldInput, {
        ...props,
        isRequired: validation === null || validation === void 0 ? void 0 : validation.isRequired
      });
    }
  };
}
var index = Object.freeze({
  __proto__: null,
  array,
  checkbox,
  child,
  conditional,
  date,
  datetime,
  document: document$1,
  emptyDocument,
  empty,
  image,
  file,
  integer,
  number,
  multiselect,
  object,
  pathReference,
  relationship,
  select,
  slug,
  text,
  url,
  blocks,
  cloudImage
});
export {
  BlockWrapper,
  NotEditable,
  ToolbarSeparator,
  collection,
  component,
  config,
  index as fields,
  singleton
};
//# sourceMappingURL=@keystatic_core.js.map
